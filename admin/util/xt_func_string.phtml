<SCRIPT LANGUAGE=VBScript RUNAT=Server>
Function FilterString(strng)
	Dim regEx, patrn
	
	if Len(strng) > 0 then
		patrn = "[^0-9a-zA-Z_]"
	
		Set regEx = New RegExp
		regEx.Pattern = patrn
		regEx.IgnoreCase = False
		regEx.Global = True
		FilterString = regEx.Replace(strng, "")
	else
		FilterString = strng
	end if

End Function

Function FilterStringSP(strng)
	Dim regEx, patrn
	
	if Len(strng) > 0 then
		patrn = "[^0-9a-zA-Z _]"
	
		Set regEx = New RegExp
		regEx.Pattern = patrn
		regEx.IgnoreCase = False
		regEx.Global = True
		FilterStringSP = regEx.Replace(strng, "")
	else
		FilterStringSP = strng
	end if

End Function

Function FilterEmailString(strng)
	Dim regEx, patrn
	
	if Len(strng) > 0 then
		patrn = "[^0-9a-zA-Z_@,.-]"
	
		Set regEx = New RegExp
		regEx.Pattern = patrn
		regEx.IgnoreCase = False
		regEx.Global = True
		FilterEmailString = regEx.Replace(strng, "")
	else
		FilterEmailString = strng
	end if

End Function

Function FilterPassword(strng)
	Dim regEx, patrn
	
	if Len(strng) > 0 then
		patrn = "[^0-9a-zA-Z!@#$*-+_,.><]"
	
		Set regEx = New RegExp
		regEx.Pattern = patrn
		regEx.IgnoreCase = False
		regEx.Global = True
		FilterPassword = regEx.Replace(strng, "")
	else
		FilterPassword = strng
	end if

End Function

Function FilterSKUString(strng)
	Dim regEx, patrn
	
	if Len(strng) > 0 then
		patrn = "[^0-9a-zA-Z +_,.#/-]"
	
		Set regEx = New RegExp
		regEx.Pattern = patrn
		regEx.IgnoreCase = False
		regEx.Global = True
		FilterSKUString = regEx.Replace(strng, "")
	else
		FilterSKUString = strng
	end if

End Function

Function FilterSessionString(strng)
	Dim regEx, patrn
	
	if Len(strng) > 0 then
		patrn = "[^0-9a-zA-Z-{}]"
	
		Set regEx = New RegExp
		regEx.Pattern = patrn
		regEx.IgnoreCase = False
		regEx.Global = True
		FilterSessionString = regEx.Replace(strng, "")
	else
		FilterSessionString = strng
	end if

End Function


Function FilterStringEx(strng, patrn)
	Dim regEx
	
	if Len(strng) > 0 AND Len(patrn) > 0 then	
		Set regEx = New RegExp
		regEx.Pattern = patrn
		regEx.IgnoreCase = False
		regEx.Global = True
		FilterStringEx = regEx.Replace(strng, "")
	else
		FilterStringEx = strng
	end if

End Function

Function FilterStringSEO(strng)
	Dim regEx, patrn
	
	if Len(strng) > 0 then
		patrn = "[^0-9a-zA-Z_]"
	
		Set regEx = New RegExp
		regEx.Pattern = patrn
		regEx.IgnoreCase = False
		regEx.Global = True
		FilterStringSEO = regEx.Replace(strng, "_")
	else
		FilterStringSEO = strng
	end if

End Function

Function HTMLEncodeString(strng)
	Dim regEx, patrn
	
	if Len(strng) > 0 then
		HTMLEncodeString = Server.HTMLEncode(strng)
	else
		HTMLEncodeString = ""
	end if

End Function


Function stripHTML(strHTML)
'Strips the HTML tags from strHTML

  Dim objRegExp, strOutput
  Set objRegExp = New Regexp

  objRegExp.IgnoreCase = True
  objRegExp.Global = True
  objRegExp.Pattern = "<(.|\n)+?>"

  'Replace all HTML tag matches with the empty string
  strOutput = objRegExp.Replace(strHTML, "")
  
  'Replace all < and > with &lt; and &gt;
  strOutput = Replace(strOutput, "<", "&lt;")
  strOutput = Replace(strOutput, ">", "&gt;")
  
  stripHTML = strOutput    'Return the value of strOutput

  Set objRegExp = Nothing
End Function

Function FilterXSS(strng)

  dim strOutput
  strOutput = Replace(strng, "<", "&lt;")
  strOutput = Replace(strOutput, ">", "&gt;")
  strOutput = Replace(strOutput, "(", "&#40;")
  strOutput = Replace(strOutput, ")", "&#41;")
  strOutput = Replace(strOutput, "#", "&#35;")
  
  FilterXSS = strOutput

End Function

Function TranslateX(string, strTypeId, strEntityId, strFieldId)
	
	'=======================================================================
	' TYPE_ID : 1=category
	' FILED ID: 1=name
	'-----------------------------------------------------------------------
	' TYPE_ID : 2=prouct
	' FILED ID: 1=name	2=description 3=detail
	'-----------------------------------------------------------------------
	' TYPE _ID : 20= attribute
	' FILED ID: 1=name
	'-----------------------------------------------------------------------
	' TYPE _ID : 21= attribute option
	' FILED ID: 1=name
	'=======================================================================
	xstring = string
	
	current_view_id = "4"
	current_view_id = Session("CURRENT_ADMIN_VIEW_ID")
	
	sql = "SELECT field_value FROM " & g_storeid & "_store_type_data_varchar WHERE "
	sql = sql & "type_id=" & strTypeId & " AND "
	sql = sql & "view_id=" & current_view_id & " AND "
	sql = sql & "entity_id='" & strEntityId & "' AND "
	sql = sql & "field_id=" & strFieldId & ""
	
	set rsx = dbconn.Execute(sql)
	if not rsx.EOF then
		xstring = rsx(0)
	end if
	rsx.Close
	set rsx = nothing
	TranslateX = xstring
	
End Function

Function SaveX(entity_id, type_id, table_id, field_id, field_value)

	view_id = Session("CURRENT_ADMIN_VIEW_ID")
	
	sql = "SELECT lang_id FROM " & g_storeid & "_store_type_data_" &  table_id & " WHERE "
	sql = sql & " entity_id='" & entity_id & "' "
	sql = sql & " AND type_id=" & type_id & " "
	sql = sql & " AND view_id=" & view_id & " "
	sql = sql & " AND field_id=" & field_id & " "
	
	set rsLang = dbconn.Execute(sql)
	if not rsLang.EOF then
		lang_id = rsLang(0)
	else
		lang_id = 0
	end if
	rsLang.Close
	set rsLang = nothing
	
	if Len(field_value) > 0 then
	
		if lang_id = 0 then
			Set rsLangUpdate = Server.CreateObject("ADODB.Recordset")
			with rsLangUpdate
				.ActiveConnection = dbconn
				.CursorLocation = 3
				.CursorType = 1
				.LockType = 3
				.Source = g_storeid & "_store_type_data_" &  table_id & " WHERE lang_id=0"
				.Open
				.AddNew
			end with
			
			rsLangUpdate("entity_id") = entity_id
			rsLangUpdate("type_id") = type_id
			rsLangUpdate("view_id") = view_id
			rsLangUpdate("field_id") = field_id
		else
			Set rsLangUpdate = Server.CreateObject("ADODB.Recordset")
			with rsLangUpdate
				.ActiveConnection = dbconn
				.CursorLocation = 3
				.CursorType = 1
				.LockType = 3
				.Source = g_storeid & "_store_type_data_" &  table_id & " WHERE lang_id=" & lang_id
				.Open
			end with
		
		end if
		

		rsLangUpdate("field_value") = field_value
		
		If dbconn.Errors.Count > 0 Then
			dbconn.Errors.Clear
			rsLangUpdate.CancelUpdate
		else
			rsLangUpdate.Update
		End If
		
		rsLangUpdate.Close
		set rsLangUpdate = nothing
	
	else
		
		sql = "DELETE FROM " & g_storeid & "_store_type_data_" &  table_id & " WHERE lang_id=" & lang_id
		dbconn.Execute(sql)
		
	end if
	
End Function
</SCRIPT>

<%
'Added by Jihoon
Function replaceCharacterEntity(strValue)
  
  If Len(strValue) > 0 Then
		'Convert basic 5 entity for xml documents
		strValue = Replace(strValue, "&", "&amp;")
		strValue = Replace(strValue, "'", "&apos;")
		strValue = Replace(strValue, """", "&quot;")
		strValue = Replace(strValue, "<", "&lt;")
		strValue = Replace(strValue, ">", "&gt;")
  End If
  
  replaceCharacterEntity = strValue
  
End Function

Function CreateURLKey(strng)
	Dim regEx, patrn
	
	if Len(strng) > 0 then
		patrn = "[^0-9a-zA-Z_]"
	
		Set regEx = New RegExp
		regEx.Pattern = patrn
		regEx.IgnoreCase = False
		regEx.Global = True
		CreateURLKey = regEx.Replace(LCase(strng), "-")
	else
		CreateURLKey = strng
	end if

End Function
%>
<%

function JsonEscape(val)
	dim strValue
	strValue = Trim(val)
	
	if Len(val) > 0 then
		for ww = 0 to 31
			strValue = Replace(strValue, Chr(ww), "")
		next
		strValue = Replace(strValue, "'", "&#39")
	else
		strValue = ""
	end if
	JsonEscape = strValue
end function

function escape(val)
	dim i,l,currentDigit, ascii

	l = len( val )
	for i = 1 to l
		currentDigit = mid(val, i, 1)
		ascii = asc( currentDigit )
		if &h00 <= ascii and ascii <= &h1F then
			currentDigit = escapeSequence(ascii)
		elseif &hC280 <= ascii and ascii <= &hC2BF then
			currentDigit = escapeSequence(ascii - &hC200) ' "u00" + right(padLeft(hex(ascii ), 2, 0), 2)
		elseif &hC380 <= ascii and ascii <= &hC3BF then
			currentDigit = escapeSequence(ascii - &hC2C0 ) ' "u00" + right(padLeft(hex(ascii - &hC2C0), 2, 0), 2)
		elseif ascii = &h22 then 'cDoubleQuote
			currentDigit = escapeSequence(ascii)
		elseif ascii = &h5C then 'cRevSolidus
			currentDigit = escapeSequence(ascii)
		elseif ascii = &h2F then 'cSoliduscSolidus
			currentDigit = escapeSequence(ascii)
		end if
		escape = escape & currentDigit
next
end function

function escapeSequence(ascii)
	escapeSequence = "u00" & right(padLeft(hex(ascii), 2, 0), 2)
	'escapeSequence = "&#" & hex(ascii)
	'escapeSequence = "&#" & Cint(right(padLeft(hex(ascii), 2, 0), 2))
end function

function padLeft(value, totalLength, paddingChar)
padLeft = right(clone(paddingChar, totalLength) & value, totalLength)
end function

function clone(byVal str, n)
for i = 1 to n : clone = clone & str : next
end function
function escapeJSONx(val)
    cDoubleQuote = &h22
    cRevSolidus = &h5C
    cSolidus = &h2F
 
    for i = 1 to (len(val))
        currentDigit = mid(val, i, 1)
        if asc(currentDigit) > &h00 and asc(currentDigit) < &h1F then
            currentDigit = escapeJSONSquence(currentDigit)
        elseif asc(currentDigit) >= &hC280 and asc(currentDigit) <= &hC2BF then
            currentDigit = "u00" + right(padLeft(hex(asc(currentDigit) - &hC200), 2, 0), 2)
        elseif asc(currentDigit) >= &hC380 and asc(currentDigit) <= &hC3BF then
            currentDigit = "u00" + right(padLeft(hex(asc(currentDigit) - &hC2C0), 2, 0), 2)
        else
            select case asc(currentDigit)
                case cDoubleQuote: currentDigit = escapeJSONSquence(currentDigit)
                case cRevSolidus: currentDigit = escapeJSONSquence(currentDigit)
                case cSolidus: currentDigit = escapeJSONSquence(currentDigit)
            end select
        end if
        escapeJSON = escapeJSON & currentDigit
    next
end function
 
function escapeJSONSquence(digit)
    escapeJSONSquence = "u00" + right(padLeft(hex(asc(digit)), 2, 0), 2)
end function 
 
function padLeft(value, totalLength, paddingChar)
    padLeft = right(clone(paddingChar, totalLength) & value, totalLength)
end function
 
public function clone(byVal str, n)
    for i = 1 to n : clone = clone & str : next
end function
%>